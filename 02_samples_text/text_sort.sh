#!/bin/sh
# author:   hoojo
# email:    hoojo_@126.com
# github:   https://github.com/hooj0
# create:   2018-10-18
# copyright by hoojo@2018



# =================================================================
#		sort —— 对字符串进行排序
# =================================================================
# sort 程序对标准输入的内容，或命令行中指定的一个或多个文件进行排序，
# 然后把排序结果发送到标准输出
# -----------------------------------------------------------------
# 常见的 sort 程序选项
# =================================================================
# 选项 	长选项 	                    描述
# -----------------------------------------------------------------
# -b 	--ignore-leading-blanks 	默认情况下，对整行进行排序，从每行的第一个字符开始。
#                                   这个选项导致 sort 程序忽略 每行开头的空格，从第一个非空白字符开始排序。
# -f 	--ignore-case 	            让排序不区分大小写。
# -n 	--numeric-sort 	            基于字符串的数值来排序。使用此选项允许根据数字值执行排序，而不是字母值。
# -r 	--reverse 	                按相反顺序排序。结果按照降序排列，而不是升序。
# -k 	--key=field1[,field2] 	    对从 field1到 field2之间的字符排序，而不是整个文本行。看下面的讨论。
# -m 	--merge 	                把每个参数看作是一个预先排好序的文件。
#                                   把多个文件合并成一个排好序的文件，而没有执行额外的排序。
# -o 	--output=file 	            把排好序的输出结果发送到文件，而不是标准输出。
# -t 	--field-separator=char 	    定义域分隔字符。默认情况下，域由空格或制表符分隔。
# -----------------------------------------------------------------
# -c 检查文件是否已经按照顺序排序。
# -d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。
# -i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。
# -m 将几个排序好的文件进行合并。
# -M 将前面3个字母依照月份的缩写进行排序。
# -n 依照数值的大小排序。
# -o <输出文件> 将排序后的结果存入指定的文件。
# -r 以相反的顺序来排序。
# -t <分隔字符> 指定排序时所用的栏位分隔字符。
# -----------------------------------------------------------------




# -----------------------------------------------------------------
#   准备工作
# -----------------------------------------------------------------
cat << EOF > example.txt
f
b
c
g
a
e
d
EOF



# =================================================================
# 示例1：对 example.txt 中的行进行排序
# =================================================================
sort example.txt


# output:
#-------------------------------------------------------------------
#a
#b
#c
#d
#e
#f
#g


# =================================================================
# 示例2：随机打乱已经排好序的 example.txt
# =================================================================
sort example.txt | sort -R

# output:
#-------------------------------------------------------------------
#d
#b
#a
#g
#e
#c
#f


# =================================================================
# 示例：列举硬盘文件，进行排序
# =================================================================
du -s /usr/share/* | sort -nr | head



# =================================================================
# 示例：对输出的结果进行排序，指定某一列
# =================================================================
ls -l /usr/bin | head
# ls 程序能按照文件大小对输出结果进行排序
ls -l /usr/bin | sort -nr -k 5 | head



# =================================================================
# 示例：多个键值来排序，b（忽略开头的空格），n（数值排序），r（逆向排序）
# =================================================================
# --key=1,1 第一个字段排序； --key=2n 第二个字段是排序的键值， 并且按照数值排序
sort --key=1,1 --key=2n distros.txt


# 指定 -k 3.7 指示 sort 程序使用一个排序键值，其始于第三个字段中的第七个字符
# 指定 -k 3.1和 -k 3.4来分离日期中的月和日
# n 和 r 选项来实现一个逆向的数值排序
# b 选项用来删除日期字段中开头的空格
sort -k 3.7nbr -k 3.1nbr -k 3.4nbr distros.txt


# output:
#-------------------------------------------------------------------
# Fedora         10    11/25/2008
# Ubuntu         8.10  10/30/2008



# =================================================================
# 示例：指定排序字段分隔符
# =================================================================
# 指定分隔符 ： ，按照第七个字段来排序
sort -t ':' -k 7 /etc/passwd | head
