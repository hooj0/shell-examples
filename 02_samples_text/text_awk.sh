#!/bin/sh
# author:   hoojo
# email:    hoojo_@126.com
# github:   https://github.com/hooj0
# create:   2018-11-30
# copyright by hoojo@2018



# =================================================================
#		awk —— 分隔文本输出
# =================================================================
# awk 是文本操作最有用的命令。它按行处理整个文件，它默认用空格把每一行分隔成很多字段。
# 最常用的语法是：
# awk '/search_pattern/ { action_to_take_if_pattern_matches; }' file_to_parse
# -----------------------------------------------------------------




# =================================================================
# 示例：以 /etc/passwd 文件为例，该文件包含以下数据：
# =================================================================
# 我们想从这个文件中过滤出每一行的 username 部分。
# -F 参数用来指明用来把行内内容分隔的分隔符。
# 这个例子中，我们用:来分隔。{ print $1 } 意思是输出行内第一个匹配的字段。

awk -F ':' '{print $1}' /etc/passwd

# output:
#-------------------------------------------------------------------
# 


# =================================================================
# 示例：计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）
# =================================================================
awk '{ x += $3 } END { print x }' myfile

# output:
#-------------------------------------------------------------------
#



# =================================================================
# 示例：统计当前目录下文件或文件夹的大小（第5列）总和
# =================================================================
ll | awk '{ x += $5 } END { print x }'

#
find . -type f -ls | awk '{ x += $7 } END { print x }'

# output:
#-------------------------------------------------------------------
#



# =================================================================
# 示例：统计当前目录下文件的大小（第7列）总和
# =================================================================
find . -type f -ls | awk '{ x += $7 } END { print x }'

# output:
#-------------------------------------------------------------------
#



# =================================================================
# 示例：准备数据
# =================================================================
cat << EOF > tmp.txt
2 this is a test
3 Are you like awk
This's a test
10 There are orange,apple,mongo
EOF


# =================================================================
# 示例：提取文件中的1/4 列数据
# =================================================================
# 每行按 空格或TAB 分割，输出文本中的1、4项
awk '{print $1,$4}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 a
#3 like
#This's
#10 orange,apple,mongo

# 格式化输出
awk '{printf "%-8s %-10s\n",$1,$4}' tmp.txt

# output:
#-------------------------------------------------------------------
#2        a
#3        like
#This's
#10       orange,apple,mongo



# =================================================================
# 示例：使用 "," 分割
# =================================================================
awk -F , '{print $1,$2}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 this is a test
#3 Are you like awk
#This's a test
#10 There are orange apple


# 或者使用内建变量
awk 'BEGIN{FS=","} {print $1,$2}' tmp.txt


# 使用多个分隔符.先使用空格分割，然后对分割结果再使用","分割
awk -F '[ ,]' '{print $1,$2,$5}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 this test
#3 Are awk
#This's a
#10 There apple



# =================================================================
# 示例：使用变量
# =================================================================
awk -va=1 -vb=5 '{print $1,$1+a,$1+b}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 3 7
#3 4 8
#This's 1 5
#10 11 15


awk -va=1 -vb=s '{print $1,$1+a,$1b}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 3 2s
#3 4 3s
#This's 1 This'ss
#10 11 10s



# =================================================================
# 示例：运算符
#-------------------------------------------------------------------
#运算符	描述
#-------------------------------------------------------------------
# = += -= *= /= %= ^= **=	赋值
# ?:	                    C条件表达式
# ||	                    逻辑或
# &&	                    逻辑与
# ~ ~!	                    匹配正则表达式和不匹配正则表达式
# < <= > >= != ==	        关系运算符
# 空格	                    连接
# + -	                    加，减
# * / %	                    乘，除与求余
# + - !	                    一元加，减和逻辑非
# ^ ***	                    求幂
# ++ --	                    增加或减少，作为前缀或后缀
# $	                        字段引用
# in	                    数组成员
# =================================================================
# 过滤第一列大于2的行
awk '$1>2' tmp.txt

# output:
#-------------------------------------------------------------------
#3 Are you like awk
#This's a test
#10 There are orange,apple,mongo


# 过滤第一列等于2的行
awk '$1==2 {print $1,$3}' tmp.txt

# output:
#-------------------------------------------------------------------
#2 is


# 过滤第一列大于2并且第二列等于'Are'的行
awk '$1>2 && $2=="Are" {print $1,$2,$3}' tmp.txt

# output:
#-------------------------------------------------------------------
#3 Are you