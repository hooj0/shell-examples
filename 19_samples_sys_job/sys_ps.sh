#!/bin/sh
# author:   hoojo
# email:    hoojo_@126.com
# github:   https://github.com/hooj0
# create:   2018-07-18
# copyright by hoojo@2018
# @changelog Added sys job `ps` shell command example



# ========================================================================================
#		ps —— 列出某个用户的所有进程，查看当前进程快照
# ========================================================================================
# 当linux系统启动会运行初始化开启init进程，运行程序 init ，init会依次有序的
# 执行称为 init 脚本的 shell 脚本（位于/etc），它们可以启动所有的系统服务。
#
# 其中系统服务以守护（daemon）程序的形式实现，守护程序仅在后台运行，没有用户界面。
# 内核维护每个进程的信息，以此来保持事情有序。
# 系统分配给每个进程一个数字，这个数字叫做 进程 ID 或 PID。
# PID 号按升序分配，init 进程的 PID 总是1。进程也有所有者和用户 ID，有效用户 ID。
# ========================================================================================
# 进程状态解释
# ----------------------------------------------------------------------------------------
#  状态 	含义
# ----------------------------------------------------------------------------------------
#   R 	运行中。这意味着，进程正在运行或准备运行。
#   S 	正在睡眠。进程没有运行，而是，正在等待一个事件， 比如说，一个按键或者网络分组。
#   D 	不可中断睡眠。进程正在等待 I/O，比方说，一个磁盘驱动器的 I/O。
#   T 	已停止. 已经指示进程停止运行。稍后介绍更多。
#   Z 	一个死进程或“僵尸”进程。这是一个已经终止的子进程，但是它的父进程还没有清空它。 （父进程没有把子进程从进程表中删除）
#   < 	一个高优先级进程。这可能会授予一个进程更多重要的资源，给它更多的 CPU 时间。
#       进程的这种属性叫做 niceness。具有高优先级的进程据说是不好的（less nice），
#       因为它占用了比较多的 CPU 时间，这样就给其它进程留下很少时间。
#   N 	低优先级进程。 一个低优先级进程（一个“好”进程）只有当其它高优先级进程被服务了之后，才会得到处理器时间。
# ----------------------------------------------------------------------------------------



# ========================================================================================
# 示例：查看进程信息
# ========================================================================================
ps

# output:
#-----------------------------------------------------------------------------------------
# PID TTY          TIME CMD
#31317 pts/0    00:00:00 bash
#31378 pts/0    00:00:00 ps


# 详细信息，展示所有进程
#-----------------------------------------------------------------------------------------
ps x

# output:
#-----------------------------------------------------------------------------------------
# PID TTY      STAT   TIME COMMAND
#    1 ?        Ss     0:14 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
#    2 ?        S      0:00 [kthreadd]
#    3 ?        S      0:00 [ksoftirqd/0]
#    5 ?        S<     0:00 [kworker/0:0H]
#    7 ?        S      0:00 [migration/0]
#    8 ?        S      0:00 [rcu_bh]


# 更多详细信息
#-----------------------------------------------------------------------------------------
# BSD 风格的 ps 命令
#-----------------------------------------------------------------------------------------
# 标题 	含义
#-----------------------------------------------------------------------------------------
# USER 	    用户 ID. 进程的所有者。
# %CPU 	    以百分比表示的 CPU 使用率
# %MEM 	    以百分比表示的内存使用率
# VSZ 	    虚拟内存大小
# RSS 	    进程占用的物理内存的大小，以千字节为单位。
# START 	进程启动的时间。若它的值超过24小时，则用天表示。
#-----------------------------------------------------------------------------------------
ps aux

# output:
#-----------------------------------------------------------------------------------------
#USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
#root         1  0.0  0.3 193748  6808 ?        Ss   7月16   0:14 /usr/lib/systemd/systemd --switched-root --system --deserialize 22
#root         2  0.0  0.0      0     0 ?        S    7月16   0:00 [kthreadd]
#root         3  0.0  0.0      0     0 ?        S    7月16   0:00 [ksoftirqd/0]
#root         5  0.0  0.0      0     0 ?        S<   7月16   0:00 [kworker/0:0H]
#root         7  0.0  0.0      0     0 ?        S    7月16   0:00 [migration/0]



# ========================================================================================
# 示例：查看用户root的进行
# ========================================================================================
ps -u root

# output:
#-----------------------------------------------------------------------------------------
# 


# ========================================================================================
# 示例：查找docker相关进程
# ========================================================================================
ps -ef | grep docker

# output:
#-----------------------------------------------------------------------------------------
#



# ========================================================================================
# 示例：查看当前执行命令行的程序
# ========================================================================================
ps -p $$

# 直接输出程序名或路径
echo $0

# output:
#-----------------------------------------------------------------------------------------
# PID    PPID    PGID     WINPID   TTY         UID    STIME COMMAND
# 810     781     810      19800  pty0       10500 10:11:11 /usr/bin/zsh-5.5.1



read exits