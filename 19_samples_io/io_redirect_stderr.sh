#!/bin/sh
# author:   hoojo
# email:    hoojo_@126.com
# github:   https://github.com/hooj0
# create:   2018-07-06
# copyright by hoojo@2018



# =================================================================
#       IO —— 标准错误重定向
# =================================================================
# 标准输入、输出和错误，输入输出的的情况有：
#   第一，程序运行结果；
#   第二，我们得到状态和错误信息， 这些告诉我们程序进展。
#
# 标准输出的特殊文件（经常用 stdout 表示），
# 而它们的状态信息则送到另一个 叫做标准错误的文件（stderr）。
# 默认情况下，标准输出和标准错误都连接到屏幕，而不是保存到磁盘文件。
# 标准输入（stdin）的设备得到输入，默认情况下， 标准输入连接到键盘。
# -----------------------------------------------------------------




# =================================================================
#	 示例：标准错误重定向
# 标准错误重定向没有专用的重定向操作符。
# 准输入、输出和错误，shell 内部分别将其称为文件描述符0、1和2。
# shell 使用文件描述符提供 了一种表示法来重定向文件。
# =================================================================
# 文件描述符”2”，紧挨着放在重定向操作符之前，来执行重定向标准错误到文件 ls-error.txt 任务。
ls -l /bin/usr 2> ls-error.txt

less ls-error.txt


# output:
#-------------------------------------------------------------------
#ls: cannot access '/bin/usr': No such file or directory




# =================================================================
#	 示例：重定向标准输出和错误到同一个文件。
#       捕捉一个命令的所有输出到一个文件。
#       为了完成这个，我们 必须同时重定向标准输出和标准错误。
# =================================================================
# 使用这种方法，我们完成两个重定向。
# 首先重定向标准输出到文件 ls-output.txt，
# 然后，重定向文件描述符2（标准错误）到文件描述符1（标准输出）使用表示法2>&1。
ls -l /bin/usr > ls-output.txt 2>&1

# 注意重定向的顺序安排非常重要。标准错误的重定向必须总是出现在标准输出重定向之后，要不然它不起作用。
# > ls-output.txt 2>&1

# 重定向标准错误到文件 ls-output.txt，但是如果命令顺序改为：
# 2>&1 >ls-output.txt，则标准错误定向到屏幕。




# =================================================================
#	 示例：重定向标准输出和错误到同一个文件。
#   bash 版本提供了第二种方法，更精简合理的方法来执行这种联合的重定向。
#   使用单单一个表示法 &> 来重定向标准输出和错误到文件 ls-output.txt
# =================================================================
ls -l /bin/usr &> ls-output.txt


# output:
#-------------------------------------------------------------------
#

现在的

read exits