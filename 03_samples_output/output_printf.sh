#!/bin/sh
# author:   hoojo
# email:    hoojo_@126.com
# github:   https://github.com/hooj0
# create:   2018-10-11
# copyright by hoojo@2018
# @changelog Added output `printf` shell command example



# =================================================================
#       printf —— 格式化打印文本输出
# =================================================================
# printf 主要用在脚本中，用于格式化表格数据，而不是直接用于命令行
# -----------------------------------------------------------------
# 语法：printf “format” arguments
# -----------------------------------------------------------------
# printf 转换规范组件
# =================================================================
# 组件 	描述
# -----------------------------------------------------------------
# d 	将数字格式化为带符号的十进制整数
# f 	格式化并输出浮点数
# o 	将整数格式化为八进制数
# s 	将字符串格式化
# x 	将整数格式化为十六进制数，必要时使用小写a-f
# X 	与 x 相同，但变为大写
# % 	打印 % 符号 (比如，指定 “%%”)
# -----------------------------------------------------------------
# 完整的转换规范包含以下内容：
# %[flags][width][.precision]conversion_specification
# -----------------------------------------------------------------
# printf 转换规范组件
# =================================================================
# 组件 	    描述
# -----------------------------------------------------------------
# flags 	有5种不同的标志:
#           # – 使用“备用格式”输出。这取决于数据类型。对于o（八进制数）转换，输出以0为前缀.对于x和X（十六进制数）转换，输出分别以0x或0X为前缀。
#           0–(零) 用零填充输出。这意味着该字段将填充前导零，比如“000380”。
#           - – (破折号) 左对齐输出。默认情况下，printf右对齐输出。
#           ‘’ – (空格) 在正数前空一格。
#           + – (加号) 在正数前添加加号。默认情况下，printf 只在负数前添加符号。
# width 	指定最小字段宽度的数。
# .precision 	对于浮点数，指定小数点后的精度位数。对于字符串转换，指定要输出的字符数。
# -----------------------------------------------------------------
# print 转换规范示例
# =================================================================
# 自变量 	        格式 	    结果 	    备注
# -----------------------------------------------------------------
# 380 	        "%d" 	    380 	    简单格式化整数。
# 380 	        "%#x" 	    0x17c 	    使用“替代格式”标志将整数格式化为十六进制数。
# 380 	        "%05d" 	    00380 	    用前导零（padding）格式化整数，且最小字段宽度为五个字符。
# 380 	        "%05.5f" 	380.00000 	使用前导零和五位小数位精度格式化数字为浮点数。由于指定的最小字段宽度（5）小于格式化后数字的实际宽度，因此前导零这一命令实际上没有起到作用。
# 380 	        "%010.5f" 	0380.00000 	将最小字段宽度增加到10，前导零现在变得可见。
# 380 	        "%+d" 	    +380 	    使用+标志标记正数。
# 380 	        "%-d" 	    380 	    使用-标志左对齐
# abcdefghijk 	"%5s" 	    abcedfghijk 用最小字段宽度格式化字符串。
# abcdefghijk 	"%d" 	    abcde 	    对字符串应用精度，它被从中截断。
# -----------------------------------------------------------------




# =================================================================
# 示例：格式化输出字符
# =================================================================
printf "I formatted the string: %s\n" foo

# output:
#-------------------------------------------------------------------
# I formatted the string: foo


# =================================================================
# 示例：数字格式化输出
# =================================================================
printf "%d, %f, %o, %s, %x, %X\n" 380 380 380 380 380 380

# output:
#-------------------------------------------------------------------
# 380, 380.000000, 574, 380, 17c, 17C



# =================================================================
# 示例：输出一些由制表符分隔的字段
# =================================================================
# 通过插入\t（tab 的转义序列）
printf "%s\t%s\t%s\n" str1 str2 str3

# output:
#-------------------------------------------------------------------
# str1 str2 str3


# =================================================================
# 示例：让一些数字的格式变得整齐
# =================================================================
printf "Line: %05d %15.3f Result: %+15d\n" 1071

# output:
#-------------------------------------------------------------------
# 3.14156295 32589
# Line: 01071 3.142 Result: +32589



